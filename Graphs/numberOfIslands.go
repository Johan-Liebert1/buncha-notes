package main

import "fmt"

var rowAdders = []int{1, -1, 0, 0}
var colAdders = [][]int{{0}, {0}, {-1}, {1}}

func getKey(row int, col int) string {
	return fmt.Sprintf("%d-%d", row, col)
}

func getNeighbors(
	row int,
	col int,
	maxRow int,
	maxCol int,
	visited *map[string]bool,
	grid *[][]byte,
) [][2]int {
	neighbors := [][2]int{}

	for index, ra := range rowAdders {
		for _, ca := range colAdders[index] {
			nRow := row + ra
			nCol := col + ca

			if nRow < 0 || nRow >= maxRow || nCol < 0 || nCol >= maxCol {
				continue
			}

			if (*grid)[nRow][nCol] == '0' {
				continue
			}

			neighbors = append(neighbors, [2]int{nRow, nCol})
		}
	}

	return neighbors
}

func gatherAll(grid *[][]byte, visited *map[string]bool, row int, col int) {
	queue := [][2]int{{row, col}}

	for len(queue) > 0 {
		row, col := queue[0][0], queue[0][1]
		queue = queue[1:]

        if _, ok := (*visited)[getKey(row, col)]; ok {
            continue
        }

		(*visited)[getKey(row, col)] = true

		queue = append(queue, getNeighbors(row, col, len(*grid), len((*grid)[0]), visited, grid)...)
	}
}

func numIslands(grid [][]byte) int {
	visited := map[string]bool{}

	totalIslands := 0

	for row := range len(grid) {
		for col := range len(grid[row]) {
			if grid[row][col] == '0' {
				continue
			}

			if _, ok := visited[getKey(row, col)]; ok {
				continue
			}

			gatherAll(&grid, &visited, row, col)
			totalIslands += 1
		}
	}

	return totalIslands
}

func main() {
	grid := [][]byte{
		{
			'1',
			'1',
			'1',
			'1',
			'1',
			'0',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'0',
			'1',
			'0',
			'1',
			'1',
		},
		{
			'0',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'0',
			'1',
			'1',
			'1',
			'1',
			'1',
			'0',
		},
		{
			'1',
			'0',
			'1',
			'1',
			'1',
			'0',
			'0',
			'1',
			'1',
			'0',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
		},
		{
			'1',
			'1',
			'1',
			'1',
			'0',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
		},
		{
			'1',
			'0',
			'0',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
		},
		{
			'1',
			'0',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'0',
			'1',
			'1',
			'1',
			'0',
			'1',
			'1',
			'1',
			'0',
			'1',
			'1',
			'1',
		},
		{
			'0',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'0',
			'1',
			'1',
			'0',
			'1',
			'1',
			'1',
			'1',
		},
		{
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'0',
			'1',
			'1',
			'1',
			'1',
			'0',
			'1',
			'1',
		},
		{
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'0',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
		},
		{
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
		},
		{
			'0',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'0',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
		},
		{
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
		},
		{
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
		},
		{
			'1',
			'1',
			'1',
			'1',
			'1',
			'0',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'0',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
		},
		{
			'1',
			'0',
			'1',
			'1',
			'1',
			'1',
			'1',
			'0',
			'1',
			'1',
			'1',
			'0',
			'1',
			'1',
			'1',
			'1',
			'0',
			'1',
			'1',
			'1',
		},
		{
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'0',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'0',
		},
		{
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'0',
			'1',
			'1',
			'1',
			'1',
			'0',
			'0',
		},
		{
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
		},
		{
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
		},
		{
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
			'1',
		},
	}

	print(numIslands(grid))
}
